[
  {
    "id": 79,
    "title": "Введение в vue.js",
    "date": "1531008000",
    "content": "Vue (произносится /vjuː/, примерно как view) — это прогрессивный фреймворк для создания пользовательских интерфейсов. В отличие от фреймворков-монолитов, Vue создан пригодным для постепенного внедрения. Его ядро в первую очередь решает задачи уровня представления (view), что упрощает интеграцию с другими библиотеками и существующими проектами. С другой стороны, Vue полностью подходит и для создания сложных одностраничных приложений (SPA, Single-Page Applications), если использовать его совместно с современными инструментами и дополнительными библиотеками.\n\nЕсли вы хотите узнать больше о Vue перед тем как начать, мы создали видео с рассказом об основных принципах работы на примере проекта.\n\nЕсли вы — опытный фронтенд-разработчик, и хотите узнать, чем Vue отличается от остальных библиотек или фреймворков, обратите внимание на сравнение с другими фреймворками.",
    "user_id": "9",
    "created_at": "2018-07-08 18:57:16",
    "updated_at": "2018-07-08 18:57:16"
  },
  {
    "id": 80,
    "title": "Экземпляр vue",
    "date": "1531008000",
    "content": "Каждое приложение Vue начинается с создания нового экземпляра Vue с помощью функции Vue:\n\nvar vm = new Vue({\n  // опции\n})\n\nХотя Vue и не реализует паттерн MVVM в полной мере, архитектура фреймворка несомненно им во многом вдохновлена. Поэтому традиционно переменная с экземпляром Vue называется vm (сокращённо от ViewModel).\n\nПри создании экземпляра Vue необходимо передать объект опций. Большая часть этого руководства посвящена описанию, как вы можете использовать эти опции для достижения желаемого поведения. Для справки вы также можете посмотреть полный список опций в справочнике API.\n\nПриложение Vue состоит из корневого экземпляра Vue, созданного с помощью new Vue, опционально организованного в дерево вложенных, повторно используемых компонентов. Например, дерево компонентов для приложения TODO-списка может выглядеть так:",
    "user_id": "9",
    "created_at": "2018-07-08 18:58:36",
    "updated_at": "2018-07-08 18:58:36"
  },
  {
    "id": 81,
    "title": "JavaScript async/await",
    "date": "1531180800",
    "content": "В течение долгого времени разработчикам JavaScript приходилось полагаться на колбэки для работы с асинхронным кодом. В результате многие из нас испытали на себе то, что принятно называть \"callback hell\", и ужас от функций вроде этой\n\nК счастью, затем пришли промисы (Promise). Они предложили гораздо более организованную альтернативу колбэкам, и большая часть JavaScript-сообщества быстро перешла к их использованию.\n\nТеперь же, с приходом Async/Await, написание JavaScript кода станет еще удобнее!\nЧто такое Async/Await?\n\nAsync/Await - это долгожданная функция JavaScript, которая делает работу с асинхронными функциями более приятной и понятной. Он построен поверх Promises и совместим со всеми существующими API-интерфейсами на основе Promise.\n\nНазвание происходит от async и await - двух ключевых слов, которые помогут нам очистить наш асинхронный код:\n\nasync - объявляет асинхронную функцию (async function someName(){...})\n\n    Автоматически преобразует обычную функцию в Promise.\n    Функции async резолвят (resolve) всё, что возвращается в их теле.\n    Асинхронные функции позволяют использовать await.\n\nawait - приостанавливает выполнение функции (let result = await someAsyncCall();)\n\n    Когда await помещен перед вызовом Promise, await приостанавливает выполнение кода, следующего за ним, заставляя скрипт ждать возвращения результата выполняемого Promise'а.\n    await работает только с Promise'ами, он не работает с обычными колбэками.\n    await может использоваться только внутри асинхронных функций.",
    "user_id": "9",
    "created_at": "2018-07-08 19:03:08",
    "updated_at": "2018-07-08 19:03:08"
  },
  {
    "id": 82,
    "title": "Еще про async",
    "date": "1514160000",
    "content": "После вызова функция async возвращает Promise. Когда результат был получен, Promise завершается, возвращая полученное значение.  Когда функция async выбрасывает исключение, Promise ответит отказом с выброшенным (throws) значением.\n\nФункция async может содержать выражение await, которое приостанавливает выполнение функции async и ожидает ответа от переданного Promise, затем возобновляя выполнение функции async и возвращая полученное значение.\n\nКлючевое слово await допустимо только в асинхронных функциях. В другом контексте вы получите ошибку SyntaxError.\n\nЦель функций async/await упросить использование promises синхронно и воспроизвести некоторое действие над группой  Promises. Точно так же как Promises подобны структурированным callback-ам, async/await подобна комбинации генераторов и promises.",
    "user_id": "9",
    "created_at": "2018-07-08 19:04:18",
    "updated_at": "2018-07-08 19:04:18"
  }
]
